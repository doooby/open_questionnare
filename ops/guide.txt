### connection
* jako root
* vytvorit si tam uzivatele
* pridat se do sudoers
* vytvorit si pem cert
* stahnout si pem
* vyzouset nove pripojeni
* zahodit rsa pro puvodni pristup

### system provision
    `name=oquest`
* create group & stack path & git repo & hooks
    `sudo bash prepare_host.sh $name`

### add user to the stack group
    `sudo usermod -a -G $name $(whoami)`

### install app
    `stack_path=/opt/$name`
* push from local to "$stack_path/app.git"
* checkout workdir
    `sudo git clone --single-branch --branch master $stack_path/app.git $stack_path/app`
* init the env
    `sudo su -c "cd $stack_path/app && bash ops/lib/build_app.sh"`
* link the build script
    `sudo ln -s $stack_path/app/ops/bin/build $stack_path/build_app`
* create db + import, this needs postgres running
    `sudo su -c "cd $stack_path/app && ops/bin/compose up -d pg"`
    `sudo su -c "cd $stack_path/app && ops/bin/compose run --rm app bin/rails db:create"`
* compose up
    `sudo $stack_path/app/ops/bin/compose up -d`
* test app + db
* create nginx cert
    `domains=(the.domain.org)`
    `sudo su -c "cd $stack_path/app && bash ops/lib/create_ssl_cert.sh $domains"`
* if not everything up, compose re-up
    `sudo $stack_path/app/ops/bin/compose up -d --force-recreate`

### building / deploying app
* test push
* prosper


----------------------------------
* yarn install & build
* do vendor jakozto cache?
* jeden kontainer pro nginx + cert renew
* do app pridat logrotate
* jak docker & cron?
