## Overview

[not written yet]

## How to

### 1. establish connection
(for services like Azure or AWS ignore this)
* connect as root
* create new user for connecting and add that to sudoers
* create and download cert
* use that cert to establish connection
* (throw away the original root connection identity)

### 2. install docker
This whole operations concept is based on docker & docker-compose. there's few ways to do it, which also depends on the OS you've chosen; probably best approach is to stick with official way as presented in docker's documentation.
https://docs.docker.com/engine/install/
https://docs.docker.com/compose/install/

### 3. stack provisioning
First, we need to create stack directory and provision it's structure, which is done using the `create_stack.sh` script. Upload this script to some temporary directory and run it.

(! take a good care to choose stack directory, as the name will also be used as name of the linux system users group, read further for details)
on local:  `scp ops/lib/create_stack.sh <server>:/tmp`
on server: `stack_path=/opt/oquest`
on server: `sudo bash /tmp/create_stack.sh $stack_path`

This sets up all necessary thing to hold the platform on this system:
* set's up system users group for the stack - for better access control
* provision the structure of the stack
* creates code repository at $stack_path/.git
* set up git hook, so that once stack is initialized (next step), the platform deploys automatically on git push.

In the end, you should not be connecting (and pushing to the repository) as root user (see 1.), but to enable access, add the user being used to connect to the created system group.
 `sudo usermod -a -G $(basename $stack_path) $(whoami)`
For that to actually take effect, you need to reconnect to the server.

### 4. init the stack using app code
Next step is to push your code to the server. To do that, first add git remote repository and push to it. After that, checkout git working directory to finally have the app code on the server. From that we can continue to actually start running the services.

on local:  `git remote add production <server>:<stack-path>/.git`
on local:  `git push production master`
on server: `sudo git clone --single-branch --branch master .git src`
on server: `sudo bash src/ops/lib/build_base_images.sh`
on server: `sudo bash src/ops/lib/build_release_images.sh`

#### 5. import DB or create new
The app needs it's database, which is postgresql. We keep it's data at /opt/oquest/var/pg_data. So you need to run the service and import your existing data or create new DB. We use app image also as it has tooling to work with the DB. Like rails itself, pg_restore, psql, etc.

If you're importing DB, you can do something like `bin/compose run --rm app <import-db-command>`. That spins up the Postgresql server and runs your import command on the app image.

To create new demo db use the same technique using the app image:
on server: `sudo bin/compose --rm app bin/rails db:create db:migrate db:seed`

Also we need to create Elasticsearch index:
on server: `sudo bin/compose --rm app bin/rails records:elastic_reindex`

#### 6. HTTPS - installing SSL certificate
Now we should have a functional stack - but there's last piece missing. Nowadays there's no reason to use plain non-cyphered HTTP, as it is unsafe and also quite simple to do so. Our technique should work fully automated - as we use here LetsEncrypt's certificates with certbot to regularly renew the certificates. Anyway since the nginx configuration requires presence of the certs, the stack fails to boot up without it. To create the certs, we need first have a domain pointing to the server, where we've just set up our stack and set the name(s) in `ops_stack.conf` config and run `install_https.sh` script.

Open the stack config file (`$stack_path/ops_stack.conf`) and add such line:
`SERVER_NAMES=<my-domain.org>`

on server: `sudo bash src/ops/lib/install_https.sh`
(! This can be run repeatedly, but it will destroy old and create certificate. Also, the nginx service needs to be down, i.e. not running)

#### 7. done - test it
Now it should all be done, so you can manually start up the services:
on server: `sudo bin/docker_compose up -d`

Note that the same can be achieved just by pushing next commit to the repository, as the git hook will call the very same command, though only after building new release images.

## Notes & Troubleshooting

#### 1. SLL certificate creation
on success it prints out this:
```
IMPORTANT NOTES:
 - Unable to install the certificate
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/<your.domain.org>/fullchain.pem
```
Do not worry about that "unable to install". Important is only that the second line tells you that the certificate has been created.
